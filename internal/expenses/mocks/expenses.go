// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package expenses_mocks is a generated GoMock package.
package expenses_mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
	currency "gitlab.ozon.dev/egor.linkinked/kartashov-egor/internal/currency"
	expenses "gitlab.ozon.dev/egor.linkinked/kartashov-egor/internal/expenses"
	users "gitlab.ozon.dev/egor.linkinked/kartashov-egor/internal/users"
)

// MockexpenseStorage is a mock of expenseStorage interface.
type MockexpenseStorage struct {
	ctrl     *gomock.Controller
	recorder *MockexpenseStorageMockRecorder
}

// MockexpenseStorageMockRecorder is the mock recorder for MockexpenseStorage.
type MockexpenseStorageMockRecorder struct {
	mock *MockexpenseStorage
}

// NewMockexpenseStorage creates a new mock instance.
func NewMockexpenseStorage(ctrl *gomock.Controller) *MockexpenseStorage {
	mock := &MockexpenseStorage{ctrl: ctrl}
	mock.recorder = &MockexpenseStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockexpenseStorage) EXPECT() *MockexpenseStorageMockRecorder {
	return m.recorder
}

// AddExpense mocks base method.
func (m *MockexpenseStorage) AddExpense(userID int64, exp expenses.Expense) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExpense", userID, exp)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddExpense indicates an expected call of AddExpense.
func (mr *MockexpenseStorageMockRecorder) AddExpense(userID, exp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExpense", reflect.TypeOf((*MockexpenseStorage)(nil).AddExpense), userID, exp)
}

// GetExpenses mocks base method.
func (m *MockexpenseStorage) GetExpenses(userID int64, minTime time.Time) ([]expenses.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpenses", userID, minTime)
	ret0, _ := ret[0].([]expenses.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpenses indicates an expected call of GetExpenses.
func (mr *MockexpenseStorageMockRecorder) GetExpenses(userID, minTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpenses", reflect.TypeOf((*MockexpenseStorage)(nil).GetExpenses), userID, minTime)
}

// MockuserUc is a mock of userUc interface.
type MockuserUc struct {
	ctrl     *gomock.Controller
	recorder *MockuserUcMockRecorder
}

// MockuserUcMockRecorder is the mock recorder for MockuserUc.
type MockuserUcMockRecorder struct {
	mock *MockuserUc
}

// NewMockuserUc creates a new mock instance.
func NewMockuserUc(ctrl *gomock.Controller) *MockuserUc {
	mock := &MockuserUc{ctrl: ctrl}
	mock.recorder = &MockuserUcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserUc) EXPECT() *MockuserUcMockRecorder {
	return m.recorder
}

// GetOrRegister mocks base method.
func (m *MockuserUc) GetOrRegister(id int64) (users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrRegister", id)
	ret0, _ := ret[0].(users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrRegister indicates an expected call of GetOrRegister.
func (mr *MockuserUcMockRecorder) GetOrRegister(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrRegister", reflect.TypeOf((*MockuserUc)(nil).GetOrRegister), id)
}

// MockcurrencyConverter is a mock of currencyConverter interface.
type MockcurrencyConverter struct {
	ctrl     *gomock.Controller
	recorder *MockcurrencyConverterMockRecorder
}

// MockcurrencyConverterMockRecorder is the mock recorder for MockcurrencyConverter.
type MockcurrencyConverterMockRecorder struct {
	mock *MockcurrencyConverter
}

// NewMockcurrencyConverter creates a new mock instance.
func NewMockcurrencyConverter(ctrl *gomock.Controller) *MockcurrencyConverter {
	mock := &MockcurrencyConverter{ctrl: ctrl}
	mock.recorder = &MockcurrencyConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcurrencyConverter) EXPECT() *MockcurrencyConverterMockRecorder {
	return m.recorder
}

// Convert mocks base method.
func (m *MockcurrencyConverter) Convert(sum decimal.Decimal, from, to currency.Currency, date time.Time) (decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Convert", sum, from, to, date)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Convert indicates an expected call of Convert.
func (mr *MockcurrencyConverterMockRecorder) Convert(sum, from, to, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Convert", reflect.TypeOf((*MockcurrencyConverter)(nil).Convert), sum, from, to, date)
}
