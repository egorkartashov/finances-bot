// Code generated by MockGen. DO NOT EDIT.
// Source: incoming_msg.go

// Package messages_mocks is a generated GoMock package.
package messages_mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	messages "gitlab.ozon.dev/egor.linkinked/finances-bot/internal/messages"
)

// MockMessageSender is a mock of MessageSender interface.
type MockMessageSender struct {
	ctrl     *gomock.Controller
	recorder *MockMessageSenderMockRecorder
}

// MockMessageSenderMockRecorder is the mock recorder for MockMessageSender.
type MockMessageSenderMockRecorder struct {
	mock *MockMessageSender
}

// NewMockMessageSender creates a new mock instance.
func NewMockMessageSender(ctrl *gomock.Controller) *MockMessageSender {
	mock := &MockMessageSender{ctrl: ctrl}
	mock.recorder = &MockMessageSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageSender) EXPECT() *MockMessageSenderMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockMessageSender) SendMessage(userID int64, msg *messages.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", userID, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockMessageSenderMockRecorder) SendMessage(userID, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockMessageSender)(nil).SendMessage), userID, msg)
}

// SendText mocks base method.
func (m *MockMessageSender) SendText(text string, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendText", text, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendText indicates an expected call of SendText.
func (mr *MockMessageSenderMockRecorder) SendText(text, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendText", reflect.TypeOf((*MockMessageSender)(nil).SendText), text, userID)
}

// MockMessageHandler is a mock of MessageHandler interface.
type MockMessageHandler struct {
	ctrl     *gomock.Controller
	recorder *MockMessageHandlerMockRecorder
}

// MockMessageHandlerMockRecorder is the mock recorder for MockMessageHandler.
type MockMessageHandlerMockRecorder struct {
	mock *MockMessageHandler
}

// NewMockMessageHandler creates a new mock instance.
func NewMockMessageHandler(ctrl *gomock.Controller) *MockMessageHandler {
	mock := &MockMessageHandler{ctrl: ctrl}
	mock.recorder = &MockMessageHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageHandler) EXPECT() *MockMessageHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockMessageHandler) Handle(ctx context.Context, msg messages.Message) messages.HandleResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, msg)
	ret0, _ := ret[0].(messages.HandleResult)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockMessageHandlerMockRecorder) Handle(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockMessageHandler)(nil).Handle), ctx, msg)
}

// MockNamedHandler is a mock of NamedHandler interface.
type MockNamedHandler struct {
	ctrl     *gomock.Controller
	recorder *MockNamedHandlerMockRecorder
}

// MockNamedHandlerMockRecorder is the mock recorder for MockNamedHandler.
type MockNamedHandlerMockRecorder struct {
	mock *MockNamedHandler
}

// NewMockNamedHandler creates a new mock instance.
func NewMockNamedHandler(ctrl *gomock.Controller) *MockNamedHandler {
	mock := &MockNamedHandler{ctrl: ctrl}
	mock.recorder = &MockNamedHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNamedHandler) EXPECT() *MockNamedHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockNamedHandler) Handle(ctx context.Context, msg messages.Message) messages.HandleResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, msg)
	ret0, _ := ret[0].(messages.HandleResult)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockNamedHandlerMockRecorder) Handle(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockNamedHandler)(nil).Handle), ctx, msg)
}

// Name mocks base method.
func (m *MockNamedHandler) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockNamedHandlerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockNamedHandler)(nil).Name))
}
