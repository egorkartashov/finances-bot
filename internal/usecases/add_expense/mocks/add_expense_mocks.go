// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package add_expense_mocks is a generated GoMock package.
package add_expense_mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
	entities "gitlab.ozon.dev/egor.linkinked/finances-bot/internal/entities"
	limits "gitlab.ozon.dev/egor.linkinked/finances-bot/internal/limits"
)

// Mocktx is a mock of tx interface.
type Mocktx struct {
	ctrl     *gomock.Controller
	recorder *MocktxMockRecorder
}

// MocktxMockRecorder is the mock recorder for Mocktx.
type MocktxMockRecorder struct {
	mock *Mocktx
}

// NewMocktx creates a new mock instance.
func NewMocktx(ctrl *gomock.Controller) *Mocktx {
	mock := &Mocktx{ctrl: ctrl}
	mock.recorder = &MocktxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocktx) EXPECT() *MocktxMockRecorder {
	return m.recorder
}

// WithTransaction mocks base method.
func (m *Mocktx) WithTransaction(ctx context.Context, fn func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MocktxMockRecorder) WithTransaction(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*Mocktx)(nil).WithTransaction), ctx, fn)
}

// MockexpenseStorage is a mock of expenseStorage interface.
type MockexpenseStorage struct {
	ctrl     *gomock.Controller
	recorder *MockexpenseStorageMockRecorder
}

// MockexpenseStorageMockRecorder is the mock recorder for MockexpenseStorage.
type MockexpenseStorageMockRecorder struct {
	mock *MockexpenseStorage
}

// NewMockexpenseStorage creates a new mock instance.
func NewMockexpenseStorage(ctrl *gomock.Controller) *MockexpenseStorage {
	mock := &MockexpenseStorage{ctrl: ctrl}
	mock.recorder = &MockexpenseStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockexpenseStorage) EXPECT() *MockexpenseStorageMockRecorder {
	return m.recorder
}

// AddExpense mocks base method.
func (m *MockexpenseStorage) AddExpense(ctx context.Context, userID int64, exp entities.Expense) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExpense", ctx, userID, exp)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddExpense indicates an expected call of AddExpense.
func (mr *MockexpenseStorageMockRecorder) AddExpense(ctx, userID, exp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExpense", reflect.TypeOf((*MockexpenseStorage)(nil).AddExpense), ctx, userID, exp)
}

// MockuserStorage is a mock of userStorage interface.
type MockuserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockuserStorageMockRecorder
}

// MockuserStorageMockRecorder is the mock recorder for MockuserStorage.
type MockuserStorageMockRecorder struct {
	mock *MockuserStorage
}

// NewMockuserStorage creates a new mock instance.
func NewMockuserStorage(ctrl *gomock.Controller) *MockuserStorage {
	mock := &MockuserStorage{ctrl: ctrl}
	mock.recorder = &MockuserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserStorage) EXPECT() *MockuserStorageMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockuserStorage) Get(ctx context.Context, id int64) (entities.User, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockuserStorageMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockuserStorage)(nil).Get), ctx, id)
}

// MockcurrencyConverter is a mock of currencyConverter interface.
type MockcurrencyConverter struct {
	ctrl     *gomock.Controller
	recorder *MockcurrencyConverterMockRecorder
}

// MockcurrencyConverterMockRecorder is the mock recorder for MockcurrencyConverter.
type MockcurrencyConverterMockRecorder struct {
	mock *MockcurrencyConverter
}

// NewMockcurrencyConverter creates a new mock instance.
func NewMockcurrencyConverter(ctrl *gomock.Controller) *MockcurrencyConverter {
	mock := &MockcurrencyConverter{ctrl: ctrl}
	mock.recorder = &MockcurrencyConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcurrencyConverter) EXPECT() *MockcurrencyConverterMockRecorder {
	return m.recorder
}

// ToBase mocks base method.
func (m *MockcurrencyConverter) ToBase(ctx context.Context, from entities.Currency, sum decimal.Decimal, date time.Time) (decimal.Decimal, entities.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToBase", ctx, from, sum, date)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(entities.Currency)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ToBase indicates an expected call of ToBase.
func (mr *MockcurrencyConverterMockRecorder) ToBase(ctx, from, sum, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToBase", reflect.TypeOf((*MockcurrencyConverter)(nil).ToBase), ctx, from, sum, date)
}

// MocklimitChecker is a mock of limitChecker interface.
type MocklimitChecker struct {
	ctrl     *gomock.Controller
	recorder *MocklimitCheckerMockRecorder
}

// MocklimitCheckerMockRecorder is the mock recorder for MocklimitChecker.
type MocklimitCheckerMockRecorder struct {
	mock *MocklimitChecker
}

// NewMocklimitChecker creates a new mock instance.
func NewMocklimitChecker(ctrl *gomock.Controller) *MocklimitChecker {
	mock := &MocklimitChecker{ctrl: ctrl}
	mock.recorder = &MocklimitCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocklimitChecker) EXPECT() *MocklimitCheckerMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MocklimitChecker) Check(ctx context.Context, userID int64, expense entities.Expense) (limits.LimitCheckResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ctx, userID, expense)
	ret0, _ := ret[0].(limits.LimitCheckResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MocklimitCheckerMockRecorder) Check(ctx, userID, expense interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MocklimitChecker)(nil).Check), ctx, userID, expense)
}

// MockreportCache is a mock of reportCache interface.
type MockreportCache struct {
	ctrl     *gomock.Controller
	recorder *MockreportCacheMockRecorder
}

// MockreportCacheMockRecorder is the mock recorder for MockreportCache.
type MockreportCacheMockRecorder struct {
	mock *MockreportCache
}

// NewMockreportCache creates a new mock instance.
func NewMockreportCache(ctrl *gomock.Controller) *MockreportCache {
	mock := &MockreportCache{ctrl: ctrl}
	mock.recorder = &MockreportCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockreportCache) EXPECT() *MockreportCacheMockRecorder {
	return m.recorder
}

// DeleteAffected mocks base method.
func (m *MockreportCache) DeleteAffected(ctx context.Context, userID int64, newExpenseDate time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAffected", ctx, userID, newExpenseDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAffected indicates an expected call of DeleteAffected.
func (mr *MockreportCacheMockRecorder) DeleteAffected(ctx, userID, newExpenseDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAffected", reflect.TypeOf((*MockreportCache)(nil).DeleteAffected), ctx, userID, newExpenseDate)
}
